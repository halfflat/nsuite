#!/usr/bin/env python

from __future__ import print_function
from itertools import count
import math
import scipy.integrate as integrate
import numpy as np
import xarray
import re
import sys

import nsuite.stdarg as stdarg

ra =     1.0   # axial resistivity [Ω m]
rm =     4.0   # membrane resistivity [Ω m²]
cm =    0.01   # memrane specific capacitance [F/m²]
Erev =   -65   # reversal potential [mV]

diam =    1.0  # cable diameter [µm]
length = 1000  # cable length [µm]
iinj =    0.1  # current injection [nA]

tend = 0.25
nsamp = 100
x = 333.33333

output, tags, params = stdarg.parse_run_stdarg()
if 'dt' in params:
    nsamp = 5*tend/params['dt']
if 'x' in params:
    x = params['x']

def u(x, t, b, tol):
    if t<=0:
        return 0.0

    uinf = math.cosh(x)/math.sinh(b)

    acc = math.exp(-t)/2
    rtol = tol*t*b

    sign = 1
    for k in count(1):
        a = k*math.pi/b
        l = 1+a*a
        q = math.exp(-l*t)/l
        sign = -sign

        if q<math.sqrt(l)*rtol:
            break

        acc += sign*math.cos(a*x)*q

    return uinf - 2*acc/b


def membrane_voltage(ts, x):
    radius = diam/2
    lam = math.sqrt(rm*radius/(2*ra))*1e3 # [µm]
    tau = rm*cm # [s]
    b = length/lam
    tol = 1e-8
    E = -iinj*ra/(math.pi*radius*radius)

    vs = np.zeros(ts.size)
    for i in range(ts.size):
        vs[i] = Erev - lam*E*u((length-x)/lam, ts[i]/tau, b, tol)

    return vs


ts = np.linspace(0., tend, num=nsamp)

out = xarray.Dataset({'voltage': (['time'], membrane_voltage(ts, x))}, coords={'time': ts})
out['x'] = x
out.to_netcdf(output)

